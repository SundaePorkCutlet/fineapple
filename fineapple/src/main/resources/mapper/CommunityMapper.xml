<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.fineapple.mapper.CommunityMapper">

	<resultMap type="board" id="boardMap">
		<result property="postNo" column="post_no"/>
		<result property="user.userId" column="user_id"/>
		<result property="group.groupNo" column="group_no" jdbcType="INTEGER"/>
		<result property="title" column="title"/>
		<result property="content" column="content"/>
		<result property="postDate" column="post_date"/>
		<result property="viewCount" column="view_count"/>
		<result property="cmntCount" column="cmnt_count"/>
		<result property="postLikeCount" column="post_like_count"/>
		<result property="updateStt" column="update_stt"/>
		<result property="cateName" column="post_cate"/>
	</resultMap>
	

	<resultMap type="cmnt" id="cmntMap">
		<result property="cmntNo" column="cmnt_no"/>
		<result property="user.userId" column="cmnt_user_id"/>
		<result property="board.postNo" column="post_no"/>
		<result property="cmntContent" column="cmnt_content"/>
		<result property="cmntDate" column="cmnt_date"/>
		<result property="cmntLikeCount" column="cmnt_like_count"/>
		<result property="updateStt" column="update_stt"/>
	</resultMap>
	
	<resultMap type="group" id="groupMap">
		<result property="groupNo" column="group_no"/>
		<result property="groupName" column="group_name"/>
		<result property="groupIntro" column="group_intro"/>
		<result property="userCount" column="user_count"/>
		<result property="groupBirth" column="group_birth"/>
	</resultMap>
	
	<resultMap type="groupUser" id="groupUserMap">
		<result property="groupUserNo" column="group_user_no"/>
		<result property="group.groupNo" column="group_no"/>
		<result property="user.userId" column="user_id"/>
		<result property="groupStt" column="group_stt"/>
		<result property="captainStt" column="captain_stt"/>
	</resultMap>
	
	<resultMap type="follow" id="followMap">
		<result property="followNo" column=""/>
		<result property="toUser.userId" column="to_user_id"/>
		<result property="fromUser.userId" column="from_user_id"/>
		<result property="followStt" column="follow_stt"/>	
	</resultMap>
	
	
	
	
	<resultMap id = "userSelectMap"	type = "user">
		<result property="userId" column ="user_id" jdbcType="VARCHAR"/>
		<result property="userName" column = "user_name" jdbcType = "VARCHAR" />
		<result property="password" 	column="password" 		jdbcType="VARCHAR" />
		<result	property="userImg"	column="user_img"	jdbcType="VARCHAR"/>
		<result property="role" 				column="role" 					jdbcType="VARCHAR" />
		<result property="gender"	column="gender"	jdbcType="VARCHAR"/>
		<result property="cellphone"	column="cellphone"	jdbcType="VARCHAR"/>
		<result property="age"	column="age"	jdbcType="INTEGER"/>
		<result property="height"	column="height"	jdbcType="INTEGER"/>
		<result property="blcRgsStt" column="blc_rgs_stt" jdbcType="INTEGER"/>
		<result property="userLeaveStt" column="user_leave_stt"	jdbcType="INTEGER"/>
		<result property="lastConTime"	column="last_con_time"	jdbcType="DATE"/>
		<result property="regDate"	column="reg_date"	jdbcType="DATE"/>
		<result property="strdWtrIntake"	column="str_wtr_intake"	jdbcType="DOUBLE"/>
		<result	property="userSttMsg"	column="user_stt_msg"	jdbcType="VARCHAR"/>
		<result property="blcAddDate"	column="blc_add_date"	jdbcType="DATE"/>
		<result property="blcAddWhy"	column="blc_add_why"	jdbcType="VARCHAR"/>
		<result property="dietServiceNo"	column="diet_service_no"	jdbcType="INTEGER"/>
		<result property="exerServiceNo"	column="exer_service_no"	jdbcType="INTEGER"/>
		<result property="trgtWeight"		column="trgt_weight"		jdbcType="DOUBLE"/>
		<result property="trgtBodyFat"		column="trgt_body_fat"		jdbcType="DOUBLE"/>
		<result	property="trgtBodyMuscle"	column="trgt_body_muscle"	jdbcType="DOUBLE"/>
		<result	property="serviceTrgt"	column="service_trgt"	jdbcType="VARCHAR"/>
		<result property="weight"	column="weight"		jdbcType="DOUBLE"/>
	</resultMap>
	
	<resultMap type="alarm" id="alarmMap">
	<result property="alarmNo" column="alarm_no"/>
	<result property="user.userId" column="user_id"/>
	<result property="otherUser.userId" column="other_user_id"/>
	<result property="alarmTitle" column="alarm_title"/>
	<result property="alarmCntnt" column="alarm_cntnt"/>	
	<result property="alarmTime" column="alarm_time"/>
	</resultMap>
	
	<resultMap type="report" id="reportMap">
	<result property="reportNo" column="report_no"/>
	<result property="user.userId" column="user_id"/>
	<result property="reportedUser.userId" column="reported_user_id"/>
	<result property="reportCate" column="report_cate"/>
	<result property="reportCntnt" column="report_why"/>
	<result property="reportStt" column="report_stt"/>
	<result property="reportDate" column="report_date"/>
	<result property="TrgtNo" column="rerport_trgt"/>
	<result property="board.postNo" column="post_no"/>
	<result property="cmnt.cmntNo" column="cmnt_no"/>
	</resultMap>
	
	<resultMap type="mtmQna" id="mtmQnaMap">
	<result property="mtmQnaNo" column="mtm_qna_no"/>
	<result property="mtmCate" column="mtm_qna_cate"/>
	<result property="user.userId" column="user_id"/>
	<result property="mtmQnaDate" column=""/>
	<result property="mtmQnaTitle" column="mtm_qna_title"/>
	<result property="mtmQnaCntnt" column="mtm_qna_cntnt"/>
	<result property="mtmAnswrCntntDate" column="mtm_answer_cntnt_date"/>
	<result property="mtmAnswrCntnt" column="mtm_answer_cntnt"/>
	<result property="mtmAnswrStt" column="mtm_answer_stt"/>
	<result property="imgName" column="mtm_img"/>	
	</resultMap>
	
	
	<resultMap type="battle" id="battleMap">
	<result property="battleNo" column="battle_no"/>
	<result property="battleResultCate" column="battle_result_cate"/>
	<result property="battleItemCate" column="battle_item_cate"/>
	<result property="battleStartDate" column="battle_start_date"/>
	<result property="battleEndDate" column="battle_end_date"/>
	<result property="battlePeriod" column="battle_period"/>
	<result property="userScore" column="user_score"/>
	<result property="rivalUserScore" column="rival_user_score"/>
	<result property="battleStt" column="battling_stt"/>
	<result property="userTrgtKcal" column="user_trgt_kcal"/>
	<result property="rivalTrgtKcal" column="rival_user_trgt_kcal"/>
	<result property="user.userId" column="user_id"/>
	<result property="rivalUser.userId" column="rival_user_id"/>
	</resultMap>
	
	<resultMap type="img" id="imgMap">
	<result property="imgNo" column="img_no"/>
	<result property="imgName" column="img_name"/>
	<result property="postNo" column="post_no"/>
	</resultMap>
	
	<resultMap type="groupBorad" id="groupBoardMap">
	<result property="postNo" column="post_no"/>
	<result property="user.userId" column="user_id"/>
	<result property="group.groupNo" column="group_no"/>
	<result property="content" column="content"/>
	<result property="postDate" column="post_date"/>
	<result property="postLikeCount" column="post_like_count"/>
	<result property="cmntCount" column="cmnt_count"/>

	
	</resultMap>
	
	<sql id="orderByPostNo">
	ORDER BY post_no
	</sql>
	

	<insert id="addPost" parameterType="board">
		<selectKey keyProperty="postNo" resultType="int" order="AFTER">
		SELECT seq_board_post_no.CURRVAL FROM dual
		</selectKey>
		
		INSERT INTO BOARD (
		POST_NO,
		USER_ID,
		GROUP_NO,
		POST_CATE,
		UPDATE_STT,
		GROUP_NO,
		TITLE, 
		CONTENT,
		POST_DATE
		)
		VALUES 
		(
		seq_board_post_no.NEXTVAL,
		#{user.userId},
		<if test="group.groupNo == 0">
		null,
		</if>	
		<if test="group.groupNo != 0">
		#{group.groupNo},
		</if>
		#{cateName},
		#{updateStt},
		<if test="groupNo == 0">
		null,
		</if>
		<if test="groupNo != 0">
		group_no = #{group.groupNo},
		</if>
		#{title:VARCHAR},
		#{content},
		SYSDATE
		)
	</insert>

	<insert id="addCmnt" parameterType="cmnt">
	<selectKey keyProperty="cmntNo" keyColumn="CMNT_NO" resultType="int">
	SELECT seq_comments_cmnt_no.CURRVAL FROM dual
	</selectKey>
	INSERT INTO COMMENTS 
	(
	CMNT_NO, 
	POST_NO,
	CMNT_USER_ID, 
	UPDATE_STT, 
	CMNT_CONTENT, 
	CMNT_DATE
	) 
	VALUES
	(
	seq_comments_cmnt_no.NEXTVAL,
	#{board.postNo},
	#{user.userId},
	#{updateStt},
	#{cmntContent},
	SYSDATE
	)
	</insert>
	
	<!-- //////////////////////////////////////////////////////// -->

	<select id="getPostList" resultMap="boardMap">
	SELECT
	b.post_no,
	b.user_id,
	b.update_stt,
	b.title,
	b.content,
	b.post_date,
	b.view_count,
	c.cmnt_count,
	NVL(sub.ssum,0) post_like_count
	FROM
	board b,
	(SELECT COUNT(*) cmnt_count, c.post_no FROM board b, comments c WHERE b.post_no = c.post_no GROUP BY c.post_no) c,
	(SELECT b.post_no, SUM(ral.post_no) ssum FROM board b, report_and_like ral WHERE b.post_no = ral.post_no AND like_stt = 1 GROUP BY (b.post_no)) sub
	
	<trim prefix="WHERE" prefixOverrides="AND | OR" suffixOverrides=",">
	b.post_no = c.post_no(+)
	AND b.post_no = sub.post_no(+)
	</trim>
	<include refid="orderByPostNo"/>
	</select>
	
	<select id="getPost" parameterType="board" resultMap="boardMap">
	
	SELECT
	b.post_no,
	b.user_id,
	b.group_no,
	b.post_cate,
	b.update_stt,
	b.title,
	b.content,
	b.post_date,
	b.view_count,
	ral.like_stt AS postLikeStt,
	totals.counts AS post_like_count
	FROM
	board b,
	(SELECT post_no, like_stt FROM report_and_like <trim prefix="WHERE"> post_no = #{postNo} AND user_id = #{user.userId:VARCHAR} AND like_stt = 1 </trim>) ral,
	(SELECT COUNT(*) counts FROM  report_and_like <trim prefix="WHERE"> post_no = #{postNo} AND like_stt = 1 </trim>) totals
	<where>
	b.post_no = #{postNo}
	AND
	b.post_no = ral.post_no(+)
	</where>
	</select>
	
	<select id="getCmntList" parameterType="board" resultMap="cmntMap">
	SELECT
	*
	FROM
	comments
	<trim prefix="WHERE" prefixOverrides="AND | OR">
	post_no = #{postNo}
	</trim>
	</select>
	
	<select id="getCmntListAfterAddCmnt" parameterType="cmnt" resultMap="cmntMap">
	SELECT
	*
	FROM
	comments
	<trim prefix="WHERE" prefixOverrides="AND | OR">
	post_no = #{board.postNo}
	</trim>
	</select>
	
	<!-- //////////////////////////////////////////////////////// -->
	
	<update id="updatePostViewCount" parameterType="board">
	UPDATE BOARD 
	<set>
	VIEW_COUNT = NVL(VIEW_COUNT,0) + 1
	</set>
	<trim prefix="WHERE" prefixOverrides="AND | OR">
	post_no = #{postNo}
	</trim>
	</update>
	
	<!-- //////////////////////////////////////////////////////// -->
	
	<insert id="addPostLike" parameterType="board">
	INSERT INTO report_and_like
	(
	REPORT_NO, 
	USER_ID, 
	REPORTED_USER_ID, 
	POST_NO, 
	LIKE_STT
	)
	VALUES
	(
	seq_report_and_like_no.NEXTVAL,
	#{user.userId},
	#{user.userId},
	#{postNo},
	1
	)
	</insert>
	
	<delete id="deletePostLike" parameterType="board">
	DELETE
	FROM
	report_and_like
	<where>
	post_no = #{postNo}
	AND
	user_id = #{user.userId}
	AND
	like_Stt = 1
	</where>
	</delete>
	
	<!-- //////////////////////////////////////////////////////// -->
	
	
	<delete id="delPost" parameterType="board">
	DELETE
	FROM
	board
	<trim prefix="WHERE" prefixOverrides="WHERE | OR">
	post_no = #{postNo}
	</trim>
	</delete>
	
	<!-- //////////////////////////////////////////////////////// -->
	
	
	<update id="updatePost" parameterType="board">
	<selectKey  order="AFTER"></selectKey>
	UPDATE BOARD
	<set>
	TITLE = #{title}
	CONTENT = #{content}
	</set>
	<trim prefix="WHERE" prefixOverrides="WHERE | OR">
	post_no = #{postNo}
	</trim>
	</update>
	
	<update id="updateCmnt" parameterType="Cmnt">
	UPDATE COMMENTS 
	<set>
	CMNT_CONTENT = #{cmntContent}
	</set>
	<where>
	cmnt_no = #{cmntNo}
	</where>
	</update>
	
	
	<!-- //////////////////////////////////////////////////////// -->
	

	<insert id="addGroup" parameterType="group">

	<selectKey keyProperty="groupNo" keyColumn="group_no" resultType="int" order="AFTER">
	SELECT seq_groups_groups_no.CURRVAL FROM dual
	</selectKey>

	INSERT
	INTO
	groups
	(
	GROUP_NO, 
	GROUP_NAME,
	GROUP_INTRO, 
	GROUP_BIRTH
	) 
	VALUES 
	(
	seq_groups_groups_no.NEXTVAL,
	#{groupName},
	#{groupIntro},
	SYSDATE
	)
	</insert>
	
	<insert id="addGroupUser" parameterType="groupUser">
	INSERT
	INTO
	group_user
	(
	group_user_no,
	group_no,
	user_id,
	captain_stt,
	group_stt
	)
	VALUES
	(
	seq_group_user_no.NEXTVAL,
	#{group.groupNo},
	#{user.userId},
	#{captainStt},
	#{groupStt}
	)
	</insert>
	
	<delete id="deleteGroupUser" parameterType="groupUser">
	DELETE
	FROM
	group_user
	<where>
	user_id = #{user.userId}
	</where>
	</delete>
	
	
	
	
	<!-- //////////////////////////////////////////////////////// -->
	
	<select id="getGroupList" resultMap="groupMap">
	SELECT
	*
	FROM
	groups
	</select>
	
	<select id="getGroup" parameterType="group" resultMap="groupMap">
	SELECT
	*
	FROM
	groups
	<where>
	group_no = #{groupNo}
	</where>
	</select>
	
	<select id="checkGroupName" parameterType="String" resultMap="groupMap">
	SELECT
	*
	FROM
	groups
	<trim prefix="WHERE" prefixOverrides="AND | OR" suffixOverrides=",">
	group_name = #{value}
			
	</trim>
	
	</select>
	
	<!-- //////////////////////////////////////////////////////// -->
	
	<select id="getGroupUserList" parameterType="group" resultMap="groupUserMap">
		SELECT
		*
		FROM
		group_user
		<trim prefix="WHERE" prefixOverrides="AND | OR">
		group_no = #{groupNo}
	</trim>
	</select>
	
	
	
	<!-- //////////////////////////////////////////////////////// -->
	
	<select id="getMyGroupList" parameterType="groupUser" resultMap="groupMap">
		SELECT
		g.group_no,
		g.group_name,
		g.group_intro,
		g.group_birth
		FROM
		groups g,
		group_user gu
		<trim prefix="WHERE" prefixOverrides="AND|OR" suffixOverrides=",">
		gu.user_id = #{user.userId}
		AND gu.group_no = g.group_no
	</trim>
	</select>
	
	
	<!-- //////////////////////////////////////////////////////// -->
	
	<select id="getGroupInterGroup" parameterType="groupUser" resultMap="groupMap">
		SELECT
		g.group_no,
		g.group_name,
		g.group_intro,
		g.group_birth
		FROM
		groups g,
		group_user gu
		<where>
		gu.user_id = #{user.userId}
		AND gu.group_stt = #{groupStt}
		AND gu.group_no = g.group_no
		</where>
	</select>
	
	<!-- //////////////////////////////////////////////////////// -->
	
	<select id="getGroupInterUser" parameterType="groupUser" resultMap="userSelectMap">
		SELECT
		u.user_id,
		u.user_name
		FROM
		groups g,
		group_user gu,
		group_user guu,
		users u
		<trim prefix="WHERE" prefixOverrides="AND | OR">
		gu.user_id = #{user.userId}
		AND gu.group_no = guu.group_no
		AND guu.group_stt = #{groupStt}
		AND guu.user_id = u.user_id
		</trim>
	</select>
	
	
	<!-- //////////////////////////////////////////////////////// -->
	
	<!-- <insert id="addReport" parameterType="report">
	INSERT
	INTO
	report_and_like 	
	(
	report_no,
	user_id,
	reported_user_id,
	post_no,
	cmnt_no,
	REPORT_LIKE_CATE,
	report_why,
	report_stt,
	report_date 
	)
	VALUES
	(
	seq_report_and_like_no.NEXTVAL,
	#{user.userId},
	#{reportedUser.userId},
	<if test='reportCate.equals("게시글신고")'>
	#{reportTrgt.postNo},
	null,
	</if>
	<if test='reportCate == "댓글신고"'>
	null,
	#{reportTrgt.cmntNo},
	</if>
	<if test='reportCate.equals("회원신고")'>
	null,
	null,
	</if>
	#{reportTrgt.postNo},
	#{reportCate},
	#{reportCntnt},
	#{reportStt},
	SYSDATE
	)
	</insert> -->
	
	<!-- //////////////////////////////////////////////////////// -->
	
	<update id="addUserBlc" parameterType="user" >
	 UPDATE USERS
	 SET  BLC_RGS_STT = 1,
	      BLC_ADD_WHY = #{blcAddWhy:VARCHAR},
	      BLC_ADD_DATE = SYSDATE
	 WHERE USER_ID= #{userId}
	</update>
	
	
	<!-- //////////////////////////////////////////////////////// -->
	
	<insert id="addAlarm" parameterType="alarm">
		INSERT
		INTO
		ALARM
		(
		alarm_no,
		user_id,
		alarm_title,
		alarm_cntnt,
		alarm_time
		)
		VALUES
		(
		seq_alarm_alarm_no.NEXTVAL,
		#{user.userId},
		#{otherUser.userId:VARCHAR},
		#{alarmTitle},
		#{alarmCntnt},
		SYSDATE
		)
	</insert>
	
	<delete id="deleteAlarm" parameterType="ALARM">
	DELETE
	FROM
	alarm
	<where>
	alarm_no = #{alarmNo}
	</where>
	</delete>
	
	<delete id="deleteAlarmAll" parameterType="alarm">
	DELETE
	FROM
	alarm
	<where>
	user_id = #{user.userId}
	</where>
	</delete>
	
	<select id="getAlarmList" parameterType="user" resultMap="alarmMap">
	SELECT
	alarm_no,
	user_id,
	other_user_id,
	alarm_title,
	alarm_cntnt,
	alarm_time
	FROM
	alarm
	<trim prefix="WHERE" prefixOverrides="AND | OR" suffixOverrides=",">
	user_id = #{userId:VARCHAR}
	</trim>
	</select>
	
	
	<insert id="addReport" parameterType="report">
	INSERT
	INTO
	report_and_like 	
	(
	report_no,
	user_id,
	reported_user_id,
	post_no,
	cmnt_no,
	REPORT_CATE,
	report_why,
	report_stt,
	report_date,
	like_stt 
	)
	VALUES
	(
	seq_report_and_like_no.NEXTVAL,
	#{user.userId},
	#{reportedUser.userId},
	<if test='reportCate == 1'>
	#{trgtNo},
	null,
	</if>
	<if test='reportCate == 2'>
	null,
	#{trgtNo},
	</if>
	<if test='reportCate == 3'>
	null,
	null,
	</if>
	#{reportCate},
	#{reportCntnt},
	#{reportStt},
	SYSDATE,
	null
	)
	</insert>
	
	
	
	
	<update id="updateReportStt" parameterType="report" >
	 UPDATE REPORT_AND_LIKE
	 SET  REPORT_STT = 1
	 WHERE USER_ID= #{user.userId}
	</update>
	
	
	

	
	<select id="getReportListNotDispose" parameterType="report">
	SELECT
	*
	FROM
	report_and_like
	<trim prefix="WHERE" prefixOverrides="AND | OR">
	report_stt = 0
	</trim>
	
	
	</select>
	

	
	<select id="getUserSearchList" parameterType="search" resultMap="userSelectMap">
	SELECT
	*
	FROM
	users
	<where>
	<if test="searchCondition == 1">
	user_id = #{searchKeyword}
	</if>
	<if test="searchCondition == 2">
	user_name = #{searchKeyword}
	</if>
	
	</where>
	</select>
	
	
	<select id="getUserSearch" parameterType="search" resultMap="userSelectMap">
	SELECT
	*
	FROM
	users
	<where>
	user_id = #{searchKeyword}
	</where>
	</select>
	
	
	<select id="getGroupToUserInter" parameterType="groupUser" resultMap="groupMap">

		SELECT
		g.*
		FROM
		groups g,
		group_user gu
		<where>
		gu.user_id = #{user.userId}
		
		<if test="captainStt == 0">
		</if>
		<if test="captainStt != 0">
		AND
		gu.captain_stt = #{captainStt}
		</if>
		AND
		gu.group_stt = #{groupStt}
		AND
		gu.group_no = g.group_no
		</where>

	</select>
	
	<select id="getUserTGroupInter" parameterType="groupUser" resultMap="groupMap">

		SELECT
		g.*
		FROM
		groups g,
		group_user gu
		<where>
		gu.user_id = #{user.userId}
		
		<if test="captainStt == 0">
		</if>
		<if test="captainStt != 0">
		AND
		gu.captain_stt = #{captainStt}
		</if>
		AND
		gu.group_stt = #{groupStt}
		AND
		gu.group_no = g.group_no
		</where>

	</select>
	
	<insert id="addGroupToUserInter" parameterType="groupUser">
		INSERT
		INTO
		group_user
		(
		group_user_no,
		group_no,
		user_id,
		group_stt
		)
		VALUES
		(
		seq_group_user_no.NEXTVAL,
		#{group.groupNo},
		#{user.userId},
		#{groupStt}
	
	)
	</insert>
	
	<select id="getCaptain" parameterType="group" resultMap="userSelectMap">
	
	</select>
	
	<select id="getFaqList" parameterType="int" resultMap="mtmQnaMap">
	SELECT
	*
	FROM
	mtm_qna
	<trim prefix="WHERE" prefixOverrides="AND | OR" suffixOverrides=",">
	mtm_qna_cate = #{value}
	</trim>
	</select>
	

	
	<delete id="delGroupUserInter" parameterType="hashmap">
		DELETE
		FROM
		group_user
		<trim prefix="WHERE" prefixOverrides="AND | OR" suffixOverrides=",">
			user_id = #{user.userId}
			AND
			group_no = #{groupNo}
		</trim>
	</delete>
	
	
	
	<update id="updateGroupUserInter" parameterType="hashmap">
		UPDATE group_user
		<trim prefix="SET" suffixOverrides=",">
			group_stt = #{groupStt},
			captain_stt = #{captainStt}
		</trim>
		<trim prefix="WHERE" prefixOverrides="AND | OR">
			user_id = #{user.userId} AND group_no = #{groupNo}
		</trim>
	</update>
	
	
	<select id="getReportListAll" parameterType="report" resultMap="reportMap">
		SELECT
		*
		FROM
		report_and_like
		<where>
		report_cate IS NOT NULL
		</where>
	</select>
	
	
	<select id="getReport" parameterType="report" resultMap="reportMap">
		SELECT
		*
		FROM
		report_and_like
		<where>
		report_no = #{reportNo}
		</where>
	</select>
	
	<select id="getCmnt" parameterType="cmnt" resultMap="cmntMap">
		SELECT
		*
		FROM
		comments
		<where>
		cmnt_no = #{cmntNo}
		</where>
	</select>
	
	<select id="getReportedUser" parameterType="report" resultMap="userSelectMap">
		SELECT
		*
		FROM
		users
		<where>
		user_id = #{reportedUser.userId}
		</where>
	</select>
	
	<select id="getPostReport" parameterType="board" resultMap="boardMap">
	
		SELECT
		*
		FROM
		board
		<where>
		post_no = #{postNo}
		</where>
	</select>
	
	
	<insert id="addMtmQna" parameterType="mtmQna">
	INSERT INTO MTM_QNA
	(
	MTM_QNA_NO, 
	USER_ID, 
	MTM_QNA_CATE,
	MTM_QNA_TITLE, 
	MTM_QNA_CNTNT,
	MTM_IMG,
	MTM_QNA_DATE
	) 
	VALUES 
	(
	seq_mtm_qna_mtm_qna_no.NEXTVAL, 
	#{user.userId}, 
	#{mtmCate}, 
	#{mtmQnaTitle},  
	#{mtmQnaCntnt},
	#{imgName},
	SYSDATE
	)
	</insert>
	
	

		
	<insert id="addFaq" parameterType="mtmQna">
	INSERT INTO MTM_QNA
	(
	MTM_QNA_NO, 
	MTM_QNA_CATE,
	MTM_QNA_TITLE, 
	MTM_QNA_CNTNT,
	MTM_QNA_DATE
	) 
	VALUES 
	(
	seq_mtm_qna_mtm_qna_no.NEXTVAL, 
	4, 
	#{mtmQnaTitle:VARCHAR},  
	#{mtmQnaCntnt:VARCHAR},
	SYSDATE
	)
	</insert>
	
	<delete id="deleteFaq" parameterType="mtmQna">
	DELETE 
	FROM MTM_QNA  
	WHERE  MTM_QNA_NO = ${mtmQnaNo}
	</delete>
	
	
	
	
	 
	
	
	
	<select id="getMyMtmList" parameterType="user" resultMap="mtmQnaMap">
	 SELECT
	 *
	 FROM
	 mtm_qna
	 <where>
	 user_id = #{userId}
	 </where>
	</select>
	
	<select id="getAdminMtmList">
	</select>
	
	<select id="getUserBattle" parameterType="user" resultMap="userSelectMap">
	SELECT
	*
	FROM
	users
	<where>
	user_id = #{userId}
	</where>
	
	</select>
	
	<insert id="addBattleInter" parameterType="battle">
	INSERT INTO battle
	(
	battle_no,
	user_id,
	rival_user_id,
	battling_stt,
	battle_item_cate,
	user_trgt_kcal,
	battle_period
	)
	VALUES
	(
	seq_battle_battle_no.NEXTVAL,
	#{user.userId},
	#{rivalUser.userId},
	#{battleStt},
	#{battleItemCate},
	#{userTrgtKcal},
	#{battlePeriod}
	)
	
	</insert>
	
	<select id="getMybattleInter" parameterType="battle" resultMap="battleMap">
	SELECT
	*
	FROM
	battle
	<where>
	<if test="rivalUser == null">
	user_id = #{user.userId}
	</if>
	<if test="rivalUser != null">
	rival_user_id = #{rivalUser.userId}
	</if>
	AND
	battling_stt = #{battleStt}
	</where>
	</select>
	
	<select id="getMybattle" parameterType="battle" resultMap="battleMap">
	SELECT
	*
	FROM
	battle
	<where>
	(user_id = #{user.userId}
	OR
	rival_user_id = #{user.userId})
	AND
	battling_stt IN (2,3)
	<!-- <foreach collection="battleStt" open="(" close=")" separator="," item="value">
	#{value}
	</foreach> -->
	</where>
	</select>
	
	
	<insert id="addPostImg" parameterType="Map">
	INSERT
	INTO
	board_img
	(
	img_no,
	post_no,
	img_name
	)
	VALUES
	(
	seq_board_img_board_img_no.NEXTVAL,
	#{postNo},
	#{time}
	)
	
	
	</insert>
	
	<select id="getPostImg" parameterType="int" resultMap="imgMap">
	SELECT
	*
	FROM
	board_img
	<where>
	post_no = #{value}
	</where>
	ORDER BY img_no
	</select>
	
	<select id="getGroupPostList" parameterType="groupBorad" resultMap="groupBoardMap">
	SELECT
	b.*,
	ral.likes,
	c.cmnts
	FROM
	board b,
	(SELECT COUNT(*) likes, b.post_no FROM report_and_like ral, board b WHERE b.post_no = ral.post_no GROUP BY b.post_no ) ral,
	(SELECT COUNT(*) cmnts, b.post_no post_no FROM comments c, board b WHERE c.post_no = b.post_no GROUP BY b.post_no) c
	WHERE
	b.group_no = #{group.groupNo}
	AND
	b. post_no = ral.post_no(+)
	AND
	b. post_no = c.post_no(+)
	</select>
	
	
	<select id="getGroupCmntList" parameterType="groupBorad" resultMap="cmntMap">
	SELECT
	*
	FROM
	comments
	<trim prefix="WHERE" prefixOverrides="AND | OR">
	post_no = #{postNo}
	</trim>
	</select>
	
	
	<insert id="addGroupPost" parameterType="groupBorad">
		<selectKey keyProperty="postNo" resultType="int" order="AFTER">
		SELECT seq_board_post_no.CURRVAL FROM dual
		</selectKey>
		
		INSERT INTO BOARD (
		POST_NO,
		USER_ID,
		GROUP_NO,
		POST_CATE,
		UPDATE_STT,
		CONTENT,
		POST_DATE
		)
		VALUES 
		(
		seq_board_post_no.NEXTVAL,
		#{user.userId},
		#{group.groupNo},
		0,
		#{updateStt},
		#{content},
		SYSDATE
		)
	</insert>
	
	<delete id="delRequestBattle" parameterType="battle">
	DELETE
	FROM
	battle
	<where>
	battle_no = #{battleNo}
	</where>
	</delete>
	
	
	<select id="getBattle" parameterType="battle" resultMap="battleMap">
	SELECT
	*
	FROM
	battle
	<trim prefix="WHERE" prefixOverrides="WHERE | OR" suffixOverrides=",">
	battle_no = #{battleNo}
	</trim>
	</select>
	
	
	<update id="updateBattle" parameterType="battle">
	UPDATE battle
	<trim prefix="SET" suffixOverrides=",">
	battling_stt = #{battleStt},
	rival_user_trgt_kcal = #{rivalTrgtKcal},
	battle_start_date = SYSDATE,
	battle_end_date = SYSDATE + #{battlePeriod}
	</trim>
	<trim prefix="WHERE" prefixOverrides="AND | OR">
	battle_no = #{battleNo}	
	</trim>
	</update>
	
	<select id="getMyBattleList" parameterType="user" resultMap="battleMap">
	SELECT
	*
	FROM
	battle
	<where>
	(battling_stt = 2
	OR
	battling_Stt = 3)
	AND
	(user_id = #{userId}
	OR
	rival_user_id = #{userId})
	</where>
	</select>
	
	
	
	
	
</mapper>
