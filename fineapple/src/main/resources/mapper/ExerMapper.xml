<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.fineapple.mapper.ExerMapper">

	<resultMap id="UserServiceMap" type="ExerServ">
		<result property="dailyTrgtBurnningKcal" 			column="DAILY_TRGT_BURNNING_KCAL" 	jdbcType="DOUBLE"/>
		<result property="trgtBodyMuscle"	column="TRGT_BODY_MUSCLE" 		jdbcType="DOUBLE" />	
		<result property="serviceTrgt" 	column="SERVICE_TRGT" 		jdbcType="VARCHAR" />
		<result property="userId" 	column="USER_ID" 		jdbcType="VARCHAR" />	
		<result property="bodyMuscle" 				column="BODY_MUSCLE" 	jdbcType="DOUBLE" />	
		<result property="exerServiceNo" 				column="exer_service_no" 	jdbcType="INTEGER" />	
	</resultMap>
	
	
	
	<resultMap id="BurnningRecordMap" type="BurnningRecord">
		<result property="exer.exerNo" 			column="EXER_NO" 			jdbcType="INTEGER"/>
		<result property="burnningRecordDate"	column="BURNNING_RECORD_DATE" 		jdbcType="DATE" />	
		<result property="exerLv" 	column="EXER_LV" 		jdbcType="VARCHAR" />
		<result property="anExerTime" 				column="AN_EXER_TIME" 	  jdbcType="VARCHAR" />
		<result property="exerName" 				column="a" 					jdbcType="VARCHAR" />
		<result property="userExerBurnning" 				column="USER_EXER_BURNNING" 	jdbcType="FLOAT" />
	</resultMap>



	<resultMap id="exerMap" type="Exer">
	     <result property="exerNo" 			column="EXER_NO" 			jdbcType="INTEGER"/>
		<result property="exerCate"	column="EXER_CATE" 		jdbcType="VARCHAR" />
		<result property="exerLv" 	column="EXER_LV"  	jdbcType="VARCHAR" />
		<result property="exerName" 				column="EXER_NAME" 					jdbcType="VARCHAR" />
		<result property="exerKcal" 				column="EXER_KCAL" 					jdbcType="FLOAT" />
		<result property="exerVideoName" 				column="EXER_VIDEO_NAME" 					jdbcType="INTEGER" />
		<result property="exerVideoTime" 				column="EXER_VIDEO_TIME" 					jdbcType="VARCHAR" />	
		<result property="exerLink" 				column="EXER_LINK" 					jdbcType="VARCHAR" />		
		<result property="recommTime" 		column="recommTime"	javaType="int" 					jdbcType="INTEGER" />		
	</resultMap>



	<resultMap id="routineInfoMap" type="Routine">
		<result property="routineInfoNo" 			column="ROUTINE_INFO_NO" 			jdbcType="INTEGER"/>
		<result property="routineNo" 			column="ROUTINE_NO" 			jdbcType="INTEGER"/>
		<result property="exerNo"	column="EXER_NO" 		jdbcType="INTEGER" />
		<result property="exerLv" 	column="EXER_LV"  	jdbcType="VARCHAR" />
		<result property="exerName" 				column="a" 					jdbcType="VARCHAR" />
		<result property="anExerTime" 	column="AN_EXER_TIME" 		jdbcType="VARCHAR" />
		<result property="anExerKcal" 	column="AN_EXER_KCAL" 		jdbcType="DOUBLE" />
		<result property="totalExerSetCount" 				column="TOTAL_EXER_SET_COUNT" 	jdbcType="INTEGER" />
		<result property="aSetTime" 				column="A_SET_TIME" 					jdbcType="VARCHAR" />
		<result property="restTime" 				column="REST_TIME" 					jdbcType="VARCHAR" />
		
		</resultMap> 
	
     <!--  <resultMap id ="FavMealMap" type="FavMeal">
      <result property="favMealNo"             column="FOOD_NO"       jdbcType="INTEGER"/>
      <result property="favMealName"    column="USER_ID"       jdbcType="VARCHAR"/>
      <result property="favMealKcal"             column="MEAL"       jdbcType="VARCHAR"/>
      <collection property="food" column="FOOD_NO" javaType="java.util.ArrayList">
      </collection>
      </resultMap>
       -->
      
	<resultMap id="routineMap" type="Routine">	
		<result property="routineNo" 	column="ROUTINE_NO" 		jdbcType="INTEGER" />
		<result property="routineName" 	column="ROUTINE_NAME" 		jdbcType="VARCHAR" />
		<result property="routineTime" 				column="ROUTINE_TIME" 					jdbcType="VARCHAR" />
		<result property="routineKcal" 				column="ROUTINE_KCAL" 					jdbcType="FLOAT" />
	</resultMap>
	
		<resultMap id="TotalRecordMap" type="TotalRecord">
			<result property="totalExerTime" column="total_exer_time" jdbcType="INTEGER"/>
			<result property="totalBurnningKcal" column="total_burnning_kcal" jdbcType="DOUBLE"/>
		</resultMap>


	<insert id="addUserService" parameterType="ExerServ">
	INSERT INTO  USER_SERVICE (USER_SERVICE_NO, USER_ID, DAILY_TRGT_BURNNING_KCAL, TRGT_BODY_MUSCLE) 
	VALUES (seq_user_service_no.NEXTVAL,
			#{userId:VARCHAR},
			#{dailyTrgtBurnningKcal:DOUBLE},
			#{trgtBodyMuscle:DOUBLE})	
	</insert>
	
	
	<update id="updateUserService" parameterType="ExerServ">
	UPDATE USER_SERVICE 
	SET 
	DAILY_TRGT_BURNNING_KCAL=#{dailyTrgtBurnningKcal:DOUBLE},
	TRGT_BODY_MUSCLE=#{trgtBodyMuscle:DOUBLE}
	WHERE USER_ID=#{userId:VARCHAR}
	</update>
	
	
	
	<update id="updateExerServiceNo" parameterType="ExerServ">
	UPDATE USERS 
	SET EXER_SERVICE_NO=#{exerServiceNo:INTEGER}
	WHERE USER_ID=#{userId:VARCHAR}
	</update>
 
 
	
		
	<select	id="getUserService"	 parameterType="String" resultType="ExerServ">
	SELECT *
	FROM ( SELECT us.*, ui.body_muscle
			FROM   USER_SERVICE  us LEFT JOIN user_body_info ui ON us.user_id = ui.user_id
		    WHERE  ui.user_id = #{value}
			ORDER BY ROWNUM DESC  )
	WHERE  ROWNUM = 1
	</select>
	
	
	
	<insert id="addDailyBurnning" parameterType="BurnningRecord">
	INSERT INTO BURNNING_RECORD (BURNNING_RECORD_NO, USER_SERVICE_NO, EXER_NO, BURNNING_RECORD_DATE, EXER_LV, AN_EXER_TIME, USER_EXER_BURNNING) 
	VALUES (seq_burnning_record_no.NEXTVAL,
			(SELECT user_service_no from user_service where user_id =#{userId:VARCHAR}),
			#{exer.exerNo:INTEGER},
			SYSDATE,
			#{exerLv:VARCHAR},
			#{anExerTime:VARCHAR},
			#{userExerBurnning:FLOAT}
			)
	
	</insert>
	
	<delete id="deleteBurnningRecord" parameterType="Integer">
	DELETE FROM BURNNING_RECORD
	WHERE BURNNING_RECORD_NO = #{value}
	
	</delete>
	
	
	<select id="getBurnningRecordList" parameterType="Integer" resultMap="BurnningRecordMap">
	SELECT * 
	FROM (SELECT br.* , e.exer_name a
	        FROM  BURNNING_RECORD br LEFT JOIN EXER e ON br.exer_no = e.exer_no)
	WHERE TO_CHAR(BURNNING_RECORD_DATE,'YYYYMMDD')  = TO_CHAR(SYSDATE,'YYYYMMDD')
	AND USER_SERVICE_NO = #{value}
	</select>
	
	<update id="updateBurnningRecord" parameterType="BurnningRecord">
	UPDATE BURNNING_RECORD 
	SET USER_EXER_BURNNING =#{userExerBurnning:DOUBLE}
	WHERE BURNNING_RECORD_NO = #{burnningRecordNo:DOUBLE}
	</update>
	
	
	
	
   <update id="updateServiceTrgt" parameterType="ExerServ">
   UPDATE USERS 
   SET SERVICE_TRGT = #{serviceTrgt:VARCHAR}
   WHERE USER_ID = #{userId:VARCHAR}
   </update>
	
	
	
	<update id="updateBodyInfo" parameterType="ExerServ">
   UPDATE USER_BODY_INFO
   SET BODY_MUSCLE = #{bodyMuscle:DOUBLE}
   WHERE USER_ID = #{userId:VARCHAR}
   	</update>
	
	
	 
 	<insert id="addExer"  parameterType="Exer">
	INSERT
	INTO EXER (EXER_NO, EXER_CATE, EXER_LV, EXER_NAME, EXER_KCAL, EXER_VIDEO_NAME, EXER_VIDEO_TIME, EXER_LINK)
	VALUES(seq_exer_exer_no.NEXTVAL,
    #{exerCate:INTEGER},
    #{exerLv:VARCHAR},
	#{exerName:VARCHAR},
    #{exerKcal:FLOAT},
    #{exerVideoName:VARCHAR},
    #{exerVideoTime:VARCHAR},
    #{exerLink:VARCHAR})
	</insert> 
	
	<select  id="getExerListJSON" resultMap="exerMap">
	SELECT e.exer_no, e.exer_name, e.exer_cate, e.exer_kcal
	FROM EXER e
	ORDER BY exer_No
	</select>
	
	 
	 
	<select  id="getExerList"  parameterType="hashMap"  resultMap="exerMap">
	SELECT *
	FROM (SELECT inner_table.* , ROWNUM AS row_seq
	FROM (SELECT e.exer_no, e.exer_name, e.exer_cate, e.exer_kcal
	FROM EXER e
	<if test="searchCondition != null">
	<where>
	<if test="searchCondition == 0 and searchKeyword !='' ">
	exer_name like '%'||#{searchKeyword:VARCHAR}||'%'
	</if>
	<if test="searchCondition == 1 and searchKeyword !='' ">
	exer_kcal like '%'||#{searchKeyword:VARCHAR}||'%'
	</if>
	</where>
	</if>
	ORDER BY exer_No ) inner_table)
	<!-- WHERE ROWNUM &lt;= 15)
	WHERE row_seq BETWEEN 1 AND 15 -->
	<!-- WHERE ROWNUM &lt;= #{endRowNum} )
	WHERE row_seq BETWEEN #{startRowNum} AND #{endRowNum}  -->
	</select>
	 
	 
	 
	  <select  id="getTotalCount"  parameterType="search"	 resultType="int">
		SELECT COUNT(*)
		FROM(	SELECT exer_name , exer_cate , exer_kcal
		        FROM exer
			<if test="searchCondition != null">
			<where>
			<if test="searchCondition == 0 and searchKeyword !='' ">
			exer_name like '%'||#{searchKeyword:VARCHAR}||'%'
			</if>
			<if test="searchCondition == 1 and searchKeyword !='' ">
			exer_kcal like '%'||#{searchKeyword:VARCHAR}||'%'
			</if>
			</where>
			</if> ) countTable						
		</select>


	 
	<select	id="getExer"	parameterType="Integer"  resultMap="exerMap">
			SELECT EXER_NO, EXER_NAME, EXER_VIDEO_NAME, EXER_VIDEO_TIME, EXER_LV, EXER_KCAL,EXER_LINK, EXER_CATE
			FROM   EXER 
			WHERE  EXER_NO= #{exerNo:INTEGER}
	</select>
	 
	 
	 
	 <update id="updateExer" parameterType="Exer">
	 <!-- <selectKey order="AFTER" 
	 keyProperty="exerName,exerCate,exerVideoName,exerVideoTime,exerLv,exerKcal,exerLink" 
	 keyColumn="EXER_NAME,EXER_CATE,EXER_VIDEO_NAME,EXER_VIDEO_TIME,EXER_LV,EXER_KCAL,EXER_LINK"
	 resultType="hashmap">
	 SELECT * FROM
	 EXER 
	 WHERE exer_no = #{exerNo}
	 </selectKey> -->
	 
     UPDATE EXER
     SET EXER_NAME  = #{exerName:VARCHAR},
      	 EXER_CATE =  #{exerCate:INTEGER},
         EXER_VIDEO_NAME = #{exerVideoName:VARCHAR},
         EXER_VIDEO_TIME = #{exerVideoTime:VARCHAR},
         EXER_LV = #{exerLv:VARCHAR},
         EXER_KCAL = #{exerKcal:FLOAT},
         EXER_LINK =  #{exerLink:VARCHAR}
     WHERE EXER_NAME = #{exerName:VARCHAR}
   	</update>
   	
   	
   	<delete id="deleteExer" parameterType="Exer">  
   	DELETE 
   	FROM EXER
   	WHERE EXER_NO = #{exerNo:INTEGER}
   	</delete> 
	
	
	<insert id="addRoutine" parameterType="Routine">
	INSERT INTO ROUTINE(routine_no, user_service_no, routine_name, routine_time , routine_kcal)
	VALUES(seq_routine_routine_no.NEXTVAL,
		(SELECT user_service_no from user_service where user_id =#{userId:VARCHAR} ),
        #{routineName:VARCHAR},
	    #{routineTime:VARCHAR},
	    #{routineKcal:FLOAT} )	
	</insert>


	 <update id="updateRoutine"  parameterType="Routine">
     UPDATE ROUTINE
     SET ROUTINE_NAME  = #{routineName:VARCHAR},
         ROUTINE_TIME = #{routineTime:VARCHAR},
         ROUTINE_KCAL = #{routineKcal:FLOAT}
     WHERE ROUTINE_NO = #{routineNo:INTEGER}
   	</update>
   	
   	
	 <update id="updateRoutineName"  parameterType="Routine">
     UPDATE ROUTINE
     SET ROUTINE_NAME  = #{routineName:VARCHAR}
     WHERE ROUTINE_NO = #{routineNo:INTEGER}
   	</update>
   	

	<select	id="getRoutine"	parameterType="Integer"  resultMap="routineMap">
			SELECT routine_no, user_service_no, routine_name, routine_time , routine_kcal
			FROM   ROUTINE
			WHERE  ROUTINE_NO= #{VALUE}
	</select>
	 
	 
 
	<delete id="deleteRoutine" parameterType="Integer">  
   	DELETE 
   	FROM ROUTINE
   	WHERE ROUTINE_NO = #{VALUE}
   	</delete> 



	<select  id="getRoutineList"  parameterType="hashMap"  resultMap="routineMap">
<!-- 	SELECT *
	FROM (SELECT inner_table.* , ROWNUM AS row_seq
	FROM (SELECT R.routine_no, R.routine_name, R.routine_time
	FROM ROUTINE R
	ORDER BY routine_no ) inner_table)
	WHERE ROWNUM &lt;= 10)
	WHERE row_seq BETWEEN 1 AND 10 and user_service_no = #{value}
	WHERE ROWNUM &lt;= #{endRowNum} )
	WHERE row_seq BETWEEN #{startRowNum} AND #{endRowNum}  -->
	SELECT *
	FROM( SELECT us.*, r.routine_no, r.routine_name, r.routine_time, r.routine_kcal
	FROM   USER_SERVICE  us LEFT JOIN routine r ON us.user_service_no = r.user_service_no)
	WHERE  user_service_no= #{value}
	
	</select>



	<insert id="addRoutineInfo" parameterType="Routine">
	INSERT INTO ROUTINE_INFO(routine_info_no, routine_no, exer_no, exer_lv, an_exer_time, an_exer_kcal )
	VALUES(seq_routine_info_no.NEXTVAL,
          #{routineNo:INTEGER},
          #{exer.exerNo:INTEGER},
          #{exerLv:VARCHAR},
	      #{anExerTime:VARCHAR},	
	      #{anExerKcal:DOUBLE} )	
	</insert>

   

	<select	id="getRoutineInfoList"	parameterType="Integer"  resultMap="routineInfoMap">
			SELECT *
			FROM( SELECT ri.*, e.exer_name a
			FROM   ROUTINE_INFO ri LEFT JOIN exer e ON ri.exer_no = e.exer_no)
			WHERE  ROUTINE_NO= #{VALUE}
			ORDER BY ROUTINE_INFO_NO desc
	</select>
	
	
	<select	id="getRoutineInfo"	parameterType="Integer"  resultMap="routineInfoMap">
			SELECT *		
			FROM   ROUTINE_INFO 
			WHERE  ROUTINE_INFO_NO= #{VALUE}
	</select>
	
	
	 
	 	
	 	
	<select id="sumBurnningKcal" resultType="double">
	SELECT SUM(USER_EXER_BURNNING)
	FROM burnning_record
	WHERE USER_SERVICE_NO = #{value} AND TRUNC(burnning_record_date) = TRUNC(SYSDATE)
	</select> 



	<delete id="deleteRoutineInfo" parameterType="Integer">  
 	DELETE 
   	FROM ROUTINE_INFO
   	WHERE ROUTINE_INFO_NO = #{VALUE}
   	</delete> 


	<select  id="recommandExerList"  parameterType="int"  resultMap="exerMap">
	SELECT exer_no, exer_name, exer_cate, exer_kcal, ROUND(#{value:INTEGER}/exer_kcal)*10 as "recommTime"
	FROM (SELECT inner_table.* , ROWNUM AS row_seq
	FROM (SELECT exer.exer_no, exer.exer_name, exer.exer_cate, exer.exer_kcal
	FROM EXER
	<if test="searchCondition != null">
	<where>
	<if test="searchCondition == 0 and searchKeyword !='' ">
	exer_name like '%'||#{searchKeyword:VARCHAR}||'%'
	</if>
	<if test="searchCondition == 1 and searchKeyword !='' ">
	exer_kcal like '%'||#{searchKeyword:VARCHAR}||'%'
	</if>
	</where>
	</if>
	ORDER BY exer_No ) inner_table)
	WHERE row_seq BETWEEN 1 AND 15
	<!-- WHERE ROWNUM &lt;= #{endRowNum} )
	WHERE row_seq BETWEEN #{startRowNum} AND #{endRowNum}  -->
	</select>
	 
	
	
<select id="sumIntakeKcal" resultType="double">
<!-- 해당일자 섭취 칼로리 총합 -->
 SELECT SUM(food_kcal)
FROM intake_record
WHERE user_id = #{userId:VARCHAR}
AND TRUNC(intake_record_date) = TRUNC(SYSDATE)
</select> 



<select id="needDaliyIntakeKcal"  resultType="user"> 
<!-- 하루칼로리 필요량 공식 산정에 필요한 값 구하기 -->
SELECT user_body_info.weight as "weight", user_body_info.height as "height", users.age as "age", users.service_trgt as "service_trgt", users.gender as "gender"
FROM user_body_info JOIN users ON user_body_info.user_id = users.user_id
WHERE users.user_id = #{userId:VARCHAR}
AND TRUNC(user_body_info_date) = TRUNC(SYSDATE)
</select>


<!-- 
<select id="" > 
추천운동 리스트 선정
SELECT exer_no, exer_name, exer_cate, exer_kcal, ROUND(초과칼로리/exer_kcal)*10
FROM exer
ORDER BY 5 DESC
</select> 
 -->


	<!-- 다이어리 담당자 하리니가 작성함 -->
	<select id="getBurnningRecordListForDiary" resultMap="BurnningRecordMap">
	SELECT * 
	FROM (SELECT br.* , e.exer_name a
	        FROM  BURNNING_RECORD br LEFT JOIN EXER e ON br.exer_no = e.exer_no)
	WHERE TRUNC(burnning_record_date) BETWEEN TRUNC(#{startDate}) AND TRUNC(#{endDate})
	AND USER_SERVICE_NO = #{userServiceNo}
	</select>	
	
	<!-- 다이어리 담당자 하리니가 작성함 -->
	<select id="getTotalExerRecord" resultMap="TotalRecordMap">
	SELECT SUM(TO_NUMBER(TO_CHAR(TO_TIMESTAMP(an_exer_time, 'hh24:mi:ss'),'sssss'))/60) as "total_exer_time", SUM(user_exer_burnning) as "total_burnning_kcal"
	FROM burnning_record
	WHERE user_service_no = #{userServiceNo}
	AND TRUNC(burnning_record_date) BETWEEN TRUNC(#{startDate}) AND TRUNC(#{endDate})
	GROUP BY TRUNC(burnning_record_date)
	</select>

</mapper>