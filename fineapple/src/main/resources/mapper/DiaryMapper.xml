<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.fineapple.mapper.DiaryMapper">

	<resultMap id="UserBodyInfoMap" type="UserBodyInfo">	
		<result property="userBodyInfoNo" column="USER_BODY_INFO_NO" jdbcType="INTEGER"/>
		<result property="userId" column="USER_ID" jdbcType="VARCHAR"/>
		<result property="date" column="USER_BODY_INFO_DATE" javaType="java.time.LocalDate" jdbcType="DATE"/>
		<result property="weight" column="WEIGHT" jdbcType="DOUBLE"/>
		<result property="bodyFat" column="BODY_FAT" jdbcType="DOUBLE"/>
		<result property="bodyMuscle" column="BODY_MUSCLE" jdbcType="DOUBLE"/>
		<result property="height" column="HEIGHT" jdbcType="DOUBLE"/>
	</resultMap>
	
	<resultMap id="UserEventMap" type="UserEvent">
		<result property="userEventNo" column="USER_EVENT_NO" jdbcType="INTEGER"/>
		<result property="userId" column="USER_ID" jdbcType="VARCHAR"/>
		<result property="eventDate" column="USER_EVENT_DATE" javaType="java.time.LocalDate" jdbcType="DATE"/>
		<result property="keyEventStt" column="KEY_EVENT_STT" jdbcType="INTEGER"/>
		<result property="eventTitle" column="EVENT_TITLE" jdbcType="VARCHAR"/>
		<result property="eventCntnt" column="EVENT_CNTNT" jdbcType="VARCHAR"/>
	</resultMap>
	
	<resultMap id="BadgeMap" type="Badge">
		<result property="badgeNo" column="BADGE_NO" jdbcType="INTEGER"/>
		<result property="userId" column="USER_ID" jdbcType="VARCHAR"/>
		<result property="badgeDate" column="BADGE_DATE" javaType="java.time.LocalDate" jdbcType="DATE"/>
		<result property="dietBadgeCount" column="DIET_BADGE_COUNT" jdbcType="INTEGER"/>
		<result property="exerBadgeCount" column="EXER_BADGE_COUNT" jdbcType="INTEGER"/>
		<result property="wtrBadgeCount" column="WTR_BADGE_COUNT" jdbcType="INTEGER"/>
		<result property="bttlBadgeCount" column="BTTL_BADGE_COUNT" jdbcType="INTEGER"/>
		<result property="dailyIntakeKcal" column="DAILY_INTAKE_KCAL" jdbcType="DOUBLE"/>
		<result property="dailyBurnningKcal" column="DAILY_BURNNING_KCAL" jdbcType="DOUBLE"/>
		<result property="userWtrIntake" column="USER_WTR_INTAKE" jdbcType="DOUBLE"/>
	</resultMap>
	
	<resultMap id="UserServMap" type="UserServ">
		<result property="userServiceNo" column="USER_SERVICE_NO" jdbcType="INTEGER"/>
		<result property="userId" column="USER_ID" jdbcType="VARCHAR"/>
		<result property="trgtWeight" column="TRGT_WEIGHT" jdbcType="DOUBLE"/>
		<result property="trgtBodyFat" column="TRGT_BODY_FAT" jdbcType="DOUBLE"/>
		<result property="trgtBodyMuscle" column="TRGT_BODY_MUSCLE" jdbcType="DOUBLE"/>
		<result property="dailyTrgtIntakeKcal" column="DAILY_TRGT_INTAKE_KCAL" jdbcType="DOUBLE"/>
		<result property="dailyTrgtIntakeCarb" column="DAILY_TRGT_INTAKE_CARB" jdbcType="DOUBLE"/>
		<result property="dailyTrgtIntakeProtein" column="DAILY_TRGT_INTAKE_PROTEIN" jdbcType="DOUBLE"/>
		<result property="dailyTrgtIntakeFat" column="DAILY_TRGT_INTAKE_FAT" jdbcType="DOUBLE"/>
		<result property="dailyTrgtBurnningKcal" column="DAILY_TRGT_BURNNING_KCAL" jdbcType="DOUBLE"/>
	</resultMap>
	
	<resultMap id="AchievementMap" type="Achievement">
		<result property="intakeKcalInPercentage" column="intake_kcal" jdbcType="INTEGER"/>
		<result property="intakeCarbInPercentage" column="intake_carb" jdbcType="INTEGER"/>
		<result property="intakeProteinInPercentage" column="intake_protein" jdbcType="INTEGER"/>
		<result property="intakeFatInPercentage" column="intake_fat" jdbcType="INTEGER"/>
	</resultMap> 
	
	<!-- INSERT : 사용자이벤트 등록 -->
	<insert id="addUserEvent" parameterType="UserEvent">
	INSERT INTO user_event (user_event_no, user_id, key_event_stt, user_event_date, event_title, event_cntnt)
	VALUES (SEQ_USER_EVENT_USER_EVENT_NO.nextval,
        #{userId:VARCHAR},
        #{keyEventStt:INTEGER},
        TRUNC(#{eventDate}),
        #{eventTitle:VARCHAR},
        #{eventCntnt:VARCHAR})
	</insert>
	
	<!-- SELECT : 해당일자에 등록된 사용자이벤트 갯수 조회 -->
	<select id="getUserEventCount" resultType="int">
	SELECT COUNT(user_event_no)
	FROM user_event
	WHERE user_id = #{userId:VARCHAR}
		AND	TRUNC(user_event_date) = TRUNC(#{eventDate})
	</select>
	
	<!-- SELECT ONE : 사용자이벤트 조회 -->
	<select id="getUserEvent" resultMap="UserEventMap">
	SELECT user_event_no, user_id, key_event_stt, user_event_date, event_title, event_cntnt
	FROM user_event
	WHERE user_event_no = #{userEventNo:INTEGER}
	</select>
	
	<!-- SELECT LIST : 사용자이벤트 목록으로 모두 조회 -->
	<select id="getUserEventList" resultMap="UserEventMap">
	SELECT user_event_no, user_id, key_event_stt, user_event_date, event_title, event_cntnt
	FROM user_event
	WHERE user_id = #{userId:VARCHAR}
		AND	TRUNC(user_event_date) = TRUNC(#{date})
	</select>
	
	<!-- UPDATE : 사용자 이벤트 수정 -->
	<update id="updateUserEvent" parameterType="UserEvent">
	UPDATE user_event
		<set>
			event_title = #{eventTitle:VARCHAR},
			event_cntnt = #{eventCntnt:VARCHAR}
		</set>
	WHERE user_event_no = #{userEventNo:INTEGER}
	</update>
	
	<!-- UPDATE : 대표 사용자 이벤트 등록 전 대표 이벤트 설정여부 모두 해제-->
	<update id="updatePreKeyUserEventStt" parameterType="int">
	UPDATE user_event
		<set>
			key_event_stt = 1
		</set>
	WHERE (TRUNC(user_event_date), user_id) = (SELECT TRUNC(user_event_date), user_id
												FROM user_event
												WHERE user_event_no = #{userEventNo:INTEGER})
	</update>
	
	<!-- UPDATE : 대표 사용자 이벤트 등록-->
	<update id="updateKeyUserEventStt" parameterType="int">
	UPDATE user_event
		<set>
			key_event_stt = 0
		</set>
	WHERE user_event_no = #{userEventNo:INTEGER}
	</update>
	
	<!-- DELETE : 사용자 이벤트 삭제 -->
	<delete id="deleteUserEvent" parameterType="int">
	DELETE user_event
	WHERE user_event_no = #{userEventNo:INTEGER}
	</delete>
	
	<!-- SELECT LIST : 신체변화정보 리스트로 모두 조회 -->
	<select id="getUserBodyInfoList" resultMap="UserBodyInfoMap">
	SELECT user_body_info_no, user_body_info_date, user_id, weight, body_fat, body_muscle, height
	FROM user_body_info
	WHERE user_id = #{userId:VARCHAR}
		AND TRUNC(user_body_info_date) BETWEEN TRUNC(#{startDate}) AND TRUNC(#{endDate})
	ORDER BY user_body_info_date
	</select>
	
	<!-- UPDATE : 신체변화정보 사용자 기록 -->
	<update id="updateUserBodyInfo" parameterType="UserBodyInfo">
	UPDATE user_body_info
		<trim prefix="SET" suffixOverrides=",">
			<if test="weight != null">weight = #{weight:DOUBLE},</if> 
			<if test="bodyFat != null">body_fat = #{bodyFat:DOUBLE},</if> 
			<if test="bodyMuscle != null">body_muscle = #{bodyMuscle:DOUBLE},</if> 
			<if test="height != null">height = #{height:DOUBLE},</if> 
		</trim>
	WHERE user_id = #{userId:VARCHAR}
		AND TRUNC(user_body_info_date) = TRUNC(#{date})
	</update>
	
	<update id="updateBadgeByDiet">
	UPDATE badge
		<set>
		diet_badge_count = #{badgeCount:INTEGER},
		daily_intake_kcal = #{inputKcal:DOUBLE}
		</set>
	WHERE user_id = #{userId:VARCHAR}
	AND TRUNC(badge_date) = TRUNC(#{date})
	</update>
	
	<update id="updateBadgeByExer">
	UPDATE badge
		<set>
		exer_badge_count = #{badgeCount:INTEGER},
		daily_burnning_kcal = #{inputKcal:DOUBLE}
		</set>
	WHERE user_id = #{userId:VARCHAR}
	AND TRUNC(badge_date) = TRUNC(#{date})
	</update>
	
	<!-- SELECT LIST : 다이어리 화면 출력을 위한 기간 내 뱃지 리스트 조회 -->
	<select id="getBadgeList" parameterType="ViewDuration" resultMap="BadgeMap">
	SELECT user_id, badge_no, badge_date, diet_badge_count, exer_badge_count, wtr_badge_count, bttl_badge_count, daily_burnning_kcal, daily_intake_kcal
	FROM badge
	WHERE user_id = #{userId:VARCHAR}
		AND TRUNC(badge_date) BETWEEN TRUNC(#{startDate}) AND TRUNC(#{endDate})
	</select>
	
	<!-- SELECT ONE : 기간내 뱃지 갯수의 합 조회 -->
	<select id="getBadgeTotalCount" parameterType="ViewDuration" resultMap="BadgeMap">
	SELECT SUM(diet_badge_count) as "DIET_BADGE_COUNT", SUM(exer_badge_count) as "EXER_BADGE_COUNT", SUM(wtr_badge_count) as "WTR_BADGE_COUNT", SUM(bttl_badge_count) as "BTTL_BADGE_COUNT"
	FROM badge
	WHERE user_id = #{userId:VARCHAR}
		AND TRUNC(badge_date) BETWEEN TRUNC(#{startDate}) AND TRUNC(#{endDate})
	</select>
	
	<!-- SELECT LIST : 다이어리 화면 출력을 위한 기간 내 대표 이벤트 제목 리스트 조회 -->
	<select id="getKeyEventTitleList" parameterType="ViewDuration" resultMap="UserEventMap">
	SELECT user_id, user_event_date, event_title
	FROM user_event
	WHERE user_id = #{userId:VARCHAR}
		AND key_event_stt = 0
		AND TRUNC(user_event_date) BETWEEN TRUNC(#{startDate}) AND TRUNC(#{endDate})
	</select>
	
	<!-- SELECT ONE : 회원의 식단 서비스/운동 서비스 목표 정보 조회 -->
	<select id="getUserServiceDetails" resultMap="UserServMap">
	SELECT user_service_no, user_id, u.trgt_weight, us.trgt_body_fat, us.trgt_body_muscle, daily_trgt_intake_kcal, daily_trgt_burnning_kcal, daily_trgt_intake_carb, daily_trgt_intake_protein, daily_trgt_intake_fat
	FROM users u JOIN user_service us USING(user_id)
	WHERE user_id = #{userId:VARCHAR}
	</select>
	
	<!-- SELECT ONE : 회윈의 식단 서비스 목표 달성률 계산해 조회 -->
	<select id="getDietAchievement" parameterType="viewDuration" resultMap="AchievementMap">
	SELECT ROUND((SELECT SUM(food_kcal)
					FROM intake_record
					WHERE user_id = #{userId:VARCHAR}
					AND TRUNC(intake_record_date) = TRUNC(#{date})
					GROUP BY TRUNC(intake_record_date))/(SELECT daily_trgt_intake_kcal
														FROM user_service
														WHERE user_id = #{userId:VARCHAR})*100) as "intake_kcal",
			ROUND((SELECT SUM(food_carb)
					FROM intake_record
					WHERE user_id = #{userId:VARCHAR}
					AND TRUNC(intake_record_date) = TRUNC(#{date})
					GROUP BY TRUNC(intake_record_date))/(SELECT daily_trgt_intake_carb
														FROM user_service
														WHERE user_id = #{userId:VARCHAR})*100) as "intake_carb",
			ROUND((SELECT SUM(food_protein)
					FROM intake_record
					WHERE user_id = #{userId:VARCHAR}
					AND TRUNC(intake_record_date) = TRUNC(#{date})
					GROUP BY TRUNC(intake_record_date))/(SELECT daily_trgt_intake_protein
														FROM user_service
														WHERE user_id = #{userId:VARCHAR})*100) as "intake_protein",
			ROUND((SELECT SUM(food_fat)
					FROM intake_record
					WHERE user_id = #{userId:VARCHAR}
					AND TRUNC(intake_record_date) = TRUNC(#{date})
					GROUP BY TRUNC(intake_record_date))/(SELECT daily_trgt_intake_fat
														FROM user_service
														WHERE user_id = #{userId:VARCHAR})*100) as "intake_fat"
	FROM dual
	</select>
	
	<!-- SELECT ONE : 회윈의 운동 서비스 목표 달성률 계산해 조회 -->
	<select id="getExerAchievement" parameterType="viewDuration" resultType="int">
	SELECT ROUND((SELECT SUM(user_exer_burnning)
					FROM burnning_record
					WHERE user_service_no = (SELECT user_service_no
												FROM user_service
												WHERE user_id = #{userId:VARCHAR})
					AND TRUNC(burnning_record_date) = TRUNC(#{date})
	GROUP BY TRUNC(burnning_record_date))/(SELECT daily_trgt_burnning_kcal
											FROM user_service
											WHERE user_id = #{userId:VARCHAR})*100) as "burnning_kcal"
	FROM dual
	</select>
	
	<!-- SELECT ONE : 기간 내 가장 섭취 칼로리가 큰 날과 그 날의 대표 이벤트 조회 -->
	<select id="getTheHighestIntakeKcalDayUserEvent" resultMap="UserEventMap">
	SELECT user_event_no, user_id, key_event_stt, user_event_date, event_title, event_cntnt
	FROM user_event
	WHERE user_id = #{userId:VARCHAR}
	AND key_event_stt = 0
	AND TRUNC(user_event_date) = (SELECT intake_record_date
									FROM (SELECT TRUNC(intake_record_date) as intake_record_date, SUM(food_kcal)
											FROM intake_record
											WHERE user_id = #{userId:VARCHAR}
											AND TRUNC(intake_record_date) BETWEEN TRUNC(#{startDate}) AND TRUNC(#{endDate})
											GROUP BY TRUNC(intake_record_date)
											ORDER BY 2 DESC)
									WHERE ROWNUM <![CDATA[<=]]> 1)
	</select>
	
	<!-- SELECT ONE : 뱃지 테이블에 기록된 가장 마지막 날짜 조회 -->
	<select id="getTheLatestDateBadge" resultType="java.time.LocalDate">
	SELECT badge_date
	FROM(SELECT badge_date
		FROM badge
		WHERE user_id = #{userId:VARCHAR}
		ORDER BY TRUNC(badge_date) DESC)
	WHERE ROWNUM <![CDATA[<=]]> 1
	</select>
	
	<!-- SELECT ONE : 사용자 신체 정보 테이블에 기록된 가장 마지막 날짜 조회 -->
	<select id="getTheLatestDateUserBodyInfo" resultType="java.time.LocalDate">
	SELECT *
	FROM(SELECT TRUNC(user_body_info_date)
		FROM user_body_info
		WHERE user_id = #{userId:VARCHAR}
		ORDER BY TRUNC(user_body_info_date) DESC)
	WHERE ROWNUM <![CDATA[<=]]> 1
	</select>
	
	<!-- INSERT : 전일 데이터대로 신체변화 정보 기록 / 배치 프로그램 실행 -->
	<insert id="addUserBodyInfo">
	INSERT INTO user_body_info (user_body_info_no, user_body_info_date, user_id, weight, body_fat, body_muscle, height)
	VALUES (SEQ_USER_BODY_INFO_NO.nextval,
			TRUNC(SYSDATE-#{inputDays:INTEGER}),
			#{userId:VARCHAR},
            (SELECT weight
			FROM user_body_info
            WHERE TRUNC(user_body_info_date) = TRUNC(SYSDATE-#{howManyDays:INTEGER})
            AND user_id = #{userId:VARCHAR}),
            (SELECT body_fat
			FROM user_body_info
            WHERE TRUNC(user_body_info_date) = TRUNC(SYSDATE-#{howManyDays:INTEGER})
            AND user_id = #{userId:VARCHAR}),
            (SELECT body_muscle
			FROM user_body_info
            WHERE TRUNC(user_body_info_date) = TRUNC(SYSDATE-#{howManyDays:INTEGER})
            AND user_id = #{userId:VARCHAR}),
            (SELECT height
			FROM user_body_info
            WHERE TRUNC(user_body_info_date) = TRUNC(SYSDATE-#{howManyDays:INTEGER})
            AND user_id = #{userId:VARCHAR}))
	</insert>
	
	<insert id="addBadge">
	INSERT INTO badge (badge_no, user_id, badge_date, diet_badge_count, exer_badge_count, wtr_badge_count, bttl_badge_count, user_wtr_intake, daily_burnning_kcal, daily_intake_kcal)
	VALUES (SEQ_BADGE_BADGE_NO.nextval,
            #{userId:VARCHAR},
            TRUNC(#{badgeDate}),
            0,
            0,
            0,
            0,
            0,
            #{dailyBurnningKcal:DOUBLE},
            #{dailyIntakeKcal:DOUBLE})
	</insert>
	
</mapper>